---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Yuri.
--- DateTime: 2018/4/29 15:27
---

local to_exception = require 'base.exception'.to_exception
local throw = require 'base.exception'.throw

local xpcall = xpcall
local error = error
local type = type

local table_pack = table.pack
local table_unpack = table.unpack

local FINALLY_RETURN = {}

---类似于python的异常处理机制, 如果catch想要吃掉异常, 可以return nil或者false, 如果想要rethrow, 可以return err
---不论怎样, finally都会被调用

--- !!! 因为lua的返回值机制有些问题, 比如多个返回值之间有nil的话, 最终unpack时可能会出错, 所以之后要用C++重写 !!!

---@param args_table: {[1]= fun(): any, catch = fun(err): boolean, finally = fun(): any}
local try = function(args_table)
    local err = nil

    local func = args_table[1]
    local args, args_beg = args_table.args, 1
    if not args then
        args = args_table
        args_beg = 2
    end



    if not func then
        throw("找不到try的实现函数")
    end

    local result = nil
    result = table_pack(xpcall(func, function(_err)
        err = to_exception(_err)
    end, table_unpack(args, args_beg, args.n)))

    --if err then
    --    print(err)
    --end

    local catch = args_table.catch
    if err and catch then
        xpcall(function()
            err = catch(err) -- 返回nil将吃掉err
        end,
                function(_err)
                    err = to_exception(_err)
                end
        )
    end

    local finally = args_table.finally

    if finally then
        local finally_result = table_pack(xpcall(finally,function(_err)
            err = to_exception(_err)
        end))

        if finally_result[2] == FINALLY_RETURN then
            result = finally_result
            result.start = 3  -- 1是bool, 2是FINALLY_RETURN, 3才是第一个返回值
        end
    end

    if err then
        error(err)  --- 如果仍然有err, 继续抛出
    end

    return table_unpack(result, result.start or 2, result.n)
end

local function try_wrap(args_table)
    return function(...)
        return try(args_table)
    end
end

_G.try = try
_G.try_wrap = try_wrap
_G.FINALLY_RETURN = FINALLY_RETURN

return {
    try = try,
    try_wrap = try_wrap,
    FINALLY_RETURN = FINALLY_RETURN,
}